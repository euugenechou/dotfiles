# Eugene Chou (euchou@ucsc.edu)
# Custom Textmate snippets for UltiSnips

priority 1

##
## Inttypes
##

snippet d8 "" i
int8_t
endsnippet

snippet d16 "" i
int16_t
endsnippet

snippet d32 "" i
int32_t
endsnippet

snippet d64 "" i
int64_t
endsnippet

snippet u8 "" i
uint8_t
endsnippet

snippet u16 "" i
uint16_t
endsnippet

snippet u32 "" i
uint32_t
endsnippet

snippet u64 "" i
uint64_t
endsnippet

##
## Defines
##

snippet def
#define ${1:symbol} ${2:value}
endsnippet

snippet ifndef
#ifndef $1
#define ${1:symbol} ${2:value}

$3

#endif
endsnippet

snippet ifdef
#ifdef  $1
#define ${1:symbol} ${2:value}

$3

#endif
endsnippet


##
## Includes
##

snippet inc
#include <${1:stdio}.h>
endsnippet

snippet inch
#include "${1:`!p
if not snip.c:
	snip.rv = snip.basename
else:
	snip.rv = snip.c`}.h"
endsnippet


##
## Main
##

snippet main
int main(int argc, char **argv) {
	$1
	return 0;
}
endsnippet

snippet mainn
int main(void) {
	$1
	return 0;
}
endsnippet


##
## Iteration
##

snippet for
for (${1:int} ${2:i} = 0; $2 < ${3:count}; $2 ${4:+=} ${5:1}) {
	$6
}
endsnippet

snippet forinf
for (;;) {
	$1
}
endsnippet

snippet wh
while (${1:condition}) {
	$2
}
endsnippet

snippet do
do {
	$2
} while (${1:condition});
endsnippet


##
## Header guard
##

snippet guard
#ifndef ${1:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('__%s__' % (name)).upper()
else:
	snip.rv = snip.c`}
#define $1

$0

#endif
endsnippet


##
## ADTs
##

global !p

def adtname():
	return snip.basename.capitalize()
def funcname():
	return snip.basename
def adtobj():
	return snip.basename[0]

endglobal

snippet adt
#include <stdlib.h>

${1:`!p snip.rv = adtname()`} *${2:`!p snip.rv = funcname()`}_create(void) {
	$1 *${3:`!p snip.rv = adtobj()`} = ($1 *)malloc(sizeof($1));
	$4
	return $3;
}

void $2_delete($1 *$3) {
	$5
	return;
}
endsnippet

snippet adth
#ifndef ${1:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('__%s__' % (name)).upper()
else:
	snip.rv = snip.c`}
#define $1

typedef struct ${2:`!p snip.rv = adtname()`} $2;

struct $2 {
	$3
};

${4:`!p snip.rv = adtname()`} *${5:`!p snip.rv = funcname()`}_create(void);

void $5_delete($4 *`!p snip.rv = adtobj()`);

#endif
endsnippet


##
## Printing
##

snippet fpr
fprintf(${1:stderr}, "${2:%s}\n", $3);
endsnippet

snippet prs
printf("${1:value} = \"%s\"\n", $1);
endsnippet

snippet prd
printf("${1:value} = %d\n", $1);
endsnippet

snippet prlf
printf("${1:value} = %lf\n", $1);
endsnippet

snippet prld
printf("${1:value} = %" PRId64 "\n", $1);
endsnippet

snippet prlu
printf("${1:value} = %" PRIu64 "\n", $1);
endsnippet


##
## Structs and typedefs
##

snippet st
struct ${1:structname} {
	$2
};
endsnippet

snippet tds
typedef struct ${1:structname} {
	$2
} $1;
endsnippet

snippet td
typedef ${1:oldtype} ${2:newtype};
endsnippet


##
## Functions
##

snippet fun
${1:void} ${2:function_name}($3) {
	$4
}
endsnippet

snippet proto
${1:void} ${2:function_name}($3);
endsnippet


##
## Conditionals
##

snippet if
if (${1:condition}) {
	$2
} $3
endsnippet

snippet elif
else if (${1:condition}) {
	$2
} $3
endsnippet

snippet el
else {
	$2
} $3
endsnippet

snippet sw
switch {
case ${1:condition}:
	$2
}
endsnippet

snippet case
case ${1:condition}:
	$2
endsnippet
