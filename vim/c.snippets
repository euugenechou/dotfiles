snippet main
	int main(int argc, char **argv) {
		${0}
		return 0;
	}
snippet mainn
	int main(void) {
		${0}
		return 0;
	}
snippet inc
	#include <${1:stdio}.h>
snippet inch
	#include "${1:`vim_snippets#Filename("$1.h")`}"
snippet def
	#define ${0}
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet ifndef
	#ifndef ${1:FOO}
		${2:#define }
	#endif
snippet guard
	#ifndef ${0:`toupper(vim_snippets#Filename('__$1_H__', '__MODULE_H__'))`}
	#define $0

	${1}

	#endif
snippet if
	if (${1:/* condition */}) {
		${2}
	} ${3}
snippet ife
	if (${1:/* condition */}) {
		${2}
	} else {
		${0}
	}
snippet el
	else {
		${0}
	}
snippet elif
	else if (${1:/* condition */}) {
		${2}
	} ${3}
snippet ter
	${1:/* condition */} ? ${2:a} : ${3:b}
snippet sw
	switch (${1:/* variable */}) {
	case ${2:/* condition */}:
		${3}
		break;
	default:
		${6}
		break;
	}
snippet case
	case ${1:/* variable case */}:
		${2}
		break;
snippet ret
	return ${0};
snippet for
	for (${1:int} ${2:i} = 0; $2 < ${3:count}; ${4:++$2}) {
		${5}
	}
snippet wh
	while (${1:/* condition */}) {
		${0}
	}
snippet do
	do {
		${0}
	} while (${1:/* condition */});
snippet fun
	${1:void} ${2:function_name}(${3}) {
		${4}
	}
snippet funn
	${1:void} ${2:function_name}(void) {
		${3}
	}
snippet fund
	${1:void} ${2:function_name}(${3});
snippet td
	typedef ${1:/* original type */} ${2:/* custom type /*};
snippet st
	struct ${1:struct_name} {
		${2}
	};
snippet tds
	typedef struct ${1:struct_name} {
		${3}
	} ${2:$1};
snippet getopt
	int opt = 0;

	while ((opt = getopt(argc, argv, ${1:/* options */})) != -1) {
		switch (opt) {
		case ${2:/* option case */}:
			${3}
			break;
		default:
			${4}
			break;
		}
	}
snippet pr
	printf("${1:%s}\n"${2});
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});
snippet prs
	printf("${1:} = \"%s\"\n", $1);
snippet prd
	printf("${1:} = %d\n", $1);
snippet prf
	printf("${1:} = %f\n", $1);
snippet prld
	printf("${1:} = %" PRId64 "\n", $1);
snippet prlu
	printf("${1:} = %" PRIu64 "\n", $1);
snippet prr
	printf("${1:} = %${2}\n", $1);
