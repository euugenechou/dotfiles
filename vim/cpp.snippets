priority -50

extends c

priority -49

##
## Preprocessor
##

snippet incc
#include <${1:iostream}>
endsnippet


##
## STL Containers
##

snippet std "" i
std::
endsnippet

snippet istream "" i
std::istream
endsnippet

snippet ostream "" i
std::ostream
endsnippet

snippet string "" i
std::string
endsnippet

snippet sstream "" i
std::stringstream
endsnippet

snippet isstream "" i
std::istringstream
endsnippet

snippet osstream "" i
std::ostringstream
endsnippet

snippet ifstream
std::ifstream ${1:stream}(${2:fname});
endsnippet

snippet ifstreamb
std::ifstream ${1:stream}(${2:fname}, std::ios::binary);
endsnippet

snippet ofstream
std::ofstream ${1:stream}(${2:fname});
endsnippet

snippet ifstreamb
std::ofstream ${1:stream}(${2:fname}, std::ios::binary);
endsnippet

snippet array
std::array<${1:T}, ${2:N}> ${3:a};
endsnippet

snippet vector
std::vector<${1:T}> ${2:v};
endsnippet

snippet deque
std::deque<${1:T}> ${2:d};
endsnippet

snippet flist
std::forward_list<${1:T}> ${2:l};
endsnippet

snippet list
std::list<${1:T}> ${2:l};
endsnippet

snippet set
std::set<${1:T}> ${2:s};
endsnippet

snippet mset
std::multiset<${1:T}> ${2:s};
endsnippet

snippet uset
std::unordered_set<${1:T}> ${2:s};
endsnippet

snippet umset
std::unordered_multiset<${1:T}> ${2:s};
endsnippet

snippet map
std::map<${1:Key}, ${2:T}> ${3:m};
endsnippet

snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3:m};
endsnippet

snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3:m};
endsnippet

snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3:m};
endsnippet

snippet stack
std::stack<${1:T}> ${2:s};
endsnippet

snippet queue
std::queue<${1:T}> ${2:q};
endsnippet

snippet pqueue
std::priority_queue<${1:T}> ${2:q};
endsnippet

snippet op "" i
operator
endsnippet


##
## Pointers
##

snippet msp
std::shared_ptr<${1:T}> ${2:var} = std::make_shared<$1>(${3:args});
endsnippet

snippet amsp
auto ${1:var} = std::make_shared<${2:T}>(${3:args});
endsnippet

snippet mup
std::unique_ptr<${1:T}> ${2:var} = std::make_unique<$1>(${3:args});
endsnippet

snippet amup
auto ${1:var} = std::make_unique<${2:T}>(${3:args});
endsnippet


##
## Casts
##

snippet sca "" i
static_cast<${1:T}>(${2:expr})
endsnippet

snippet dca "" i
dynamic_cast<${1:T}>(${2:expr})
endsnippet

snippet rca "" i
reinterpret_cast<${1:T}>(${2:expr})
endsnippet

snippet cca "" i
const_cast<${1:T}>(${2:expr})
endsnippet


##
## Access Modifiers
##

snippet pri
private
endsnippet

snippet pro
protected
endsnippet

snippet pub
public
endsnippet

snippet fr
friend
endsnippet

snippet mu
mutable
endsnippet


##
## Classes, namespaces, and templates
##

snippet cl
class ${1:`!p snip.rv = snip.basename or "name"`} {
	private:
		${3}

	public:
		${1/(\w+).*/$1/}(${2:arguments});
};
endsnippet

snippet cli
class ${1:`!p snip.rv = snip.basename or "name"`} : ${2:public} ${3:parent} {
	private:
		${5}

	public:
		${1/(\w+).*/$1/}(${4:arguments}) : $3($4);
};
endsnippet

snippet ns
namespace ${1:`!p snip.rv = snip.basename or "name"`} {
	${2}
}
endsnippet

snippet tpl
template<class T>
$0
endsnippet


##
## I/O
##

snippet cout
std::cout << ${1} << std::endl;
endsnippet

snippet coutv
std::cout << "${1:var} = " << $1 << std::endl;
endsnippet

snippet cerr
std::cerr << ${1} << std::endl;
endsnippet

snippet cerrv
std::cerr << "${1:var} = " << $1 << std::endl;
endsnippet

snippet cin
std::cin >> ${1};
endsnippet

snippet endl
std::endl
endsnippet

snippet setw
std::setw(${1:2})
endsnippet

snippet setf
std::setfill(${1:'0'})
endsnippet


##
## Iteration
##

snippet fora
for (${1:auto} ${2:it} : ${3:container}) {
	${4}
}
endsnippet

##
## Exceptions
##


snippet try
try {
	${3}
} catch(${1:exception}) {
	${2}
}
endsnippet
